{"version":3,"sources":["components/App/App.tsx","components/ModeSelect/ModeSelect.tsx","components/UserForm/UserForm.tsx","components/SignInCountDown/SignInCountDown.tsx","index.tsx"],"names":["State","ModeSelect","props","className","style","width","onClick","handleClemsonUser","handleGuestUser","UserForm","title","placeholder","errorMessage","useState","userName","setUserName","inputError","setInputError","isLoading","setIsLoading","mode","CLEMSON","GUEST","onSubmit","event","trim","param","username","fetch","method","body","JSON","stringify","then","response","ok","handleSignInMessage","catch","error","preventDefault","type","value","onChange","currentTarget","handleBack","SignInCountDown","date","Date","now","renderer","SIGN_IN","onComplete","App","render","MAIN","appMode","setAppMode","isIn","FAILED_SIGN_IN","height","document","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.94276b7d.chunk.js","sourcesContent":["import { useState } from 'react';\nimport ModeSelect from '../ModeSelect/ModeSelect'\nimport UserForm from '../UserForm/UserForm'\nimport SignInCountDown from '../SignInCountDown/SignInCountDown'\n\nexport enum State {\n  MAIN,\n  CLEMSON,\n  GUEST,\n  SIGN_IN,\n  FAILED_SIGN_IN\n}\n\nexport interface Props {\n  handleClemsonUser?: () => void;\n  handleGuestUser?: () => void;\n  handleSignInMessage?: (isIn: boolean) => void;\n  handleBack?: () => void;\n  mode?: State;\n}\n\nconst App = () => {\n\n  const [appMode, setAppMode] = useState(State.MAIN)\n\n  const handleClemsonUser = ():void => {\n    setAppMode(State.CLEMSON);\n  }\n\n  const handleGuestUser = ():void  => {\n    setAppMode(State.GUEST);\n  }\n\n  const handleSignInMessage = (isIn: boolean):void  => {\n    isIn ? setAppMode(State.SIGN_IN) : setAppMode(State.FAILED_SIGN_IN)\n  }\n\n  const handleBack = ():void  => {\n    setAppMode(State.MAIN);\n  }\n\n\n\n  let render;\n  if (appMode === State.MAIN) {\n    render = (\n      <ModeSelect \n        handleClemsonUser={handleClemsonUser} \n        handleGuestUser={handleGuestUser}/>\n    )\n  } else if (appMode === State.CLEMSON) {\n    render = (\n      <UserForm handleSignInMessage={handleSignInMessage}\n      handleBack={handleBack} mode={appMode}></UserForm>\n    )\n  } else if (appMode === State.GUEST) {\n    render = (\n      <UserForm handleSignInMessage={handleSignInMessage}\n      handleBack={handleBack} mode={appMode}></UserForm>\n    )\n  } else if (appMode === State.SIGN_IN) {\n    render = (\n      <SignInCountDown handleBack={handleBack} mode={appMode}></SignInCountDown>\n    )\n  } else if (appMode === State.FAILED_SIGN_IN) {\n    render = (\n      <SignInCountDown handleBack={handleBack} mode={appMode}></SignInCountDown>\n    )\n  }\n\n  return (\n    <div className=\"container bg-primary p-5 rounded\" style={{height: \"400px\"}}>\n      <h1 className=\"text-secondary fw-bold mb-4 text-center\">Visit the Makerspace!</h1>\n      <div className=\"d-flex justify-content-center\">\n        {render}\n      </div>\n    </div>\n  )\n};\n\nexport default App;","import { Props } from '../App/App';\n\nconst ModeSelect = (props: Props) => (\n  <div>\n      <button className=\"btn-lg btn-secondary mb-3 d-block\" \n      style={{width: '250px'}} \n      onClick={props.handleClemsonUser}>Clemson User</button>\n      \n      <button className=\"btn-lg btn-accent mb-3 d-block\" \n      style={{width: '250px'}} \n      onClick={props.handleGuestUser}>Guest User</button>\n  </div>\n);\n\nexport default ModeSelect;\n","import React, { useState } from 'react';\nimport { State, Props } from '../App/App'\n\n\nconst UserForm = (props: Props) => {\n  const [userName, setUserName] = useState(\"\");\n  const [inputError, setInputError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setUserName(event.currentTarget.value);\n  }\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    if (userName.trim() === \"\") {\n      setInputError(errorMessage);\n    } else {\n      setInputError(\"\");\n      const param = {username: userName};\n      fetch(\"https://api.cumaker.space/visit\", {\n        method:\"post\",\n        body:JSON.stringify(param)\n      }).then(response => {\n        if (response.ok) {\n          if (props.handleSignInMessage) props.handleSignInMessage(true);\n        } else {\n          if (props.handleSignInMessage) props.handleSignInMessage(false);\n        }\n      }).catch(error => {if (props.handleSignInMessage) props.handleSignInMessage(false)});\n      setIsLoading(true);\n    }\n    event.preventDefault()\n    setUserName(\"\");\n  }\n\n  let title;\n  let placeholder;\n  let errorMessage: string;\n  \n  if (props.mode === State.CLEMSON) {\n    title = <h3 className=\"text-light\">Clemson User Login</h3>;\n    placeholder = \"Username\";\n    errorMessage = \"Please enter your username.\";\n  } else if (props.mode === State.GUEST) {\n    title = <h3 className=\"text-light\">Guest User Login</h3>;\n    placeholder = \"Email Address\"\n    errorMessage = \"Please enter an email address.\"\n  }\n\n  if (!isLoading) {\n    return (\n      <div>\n        {title}\n        <form onSubmit={handleSubmit} className=\"\">\n          <div className=\"form-group mb-3\">\n            <input type={(props.mode === State.CLEMSON ? \"text\" : \"email\")} \n            value={userName} \n            onChange={handleChange} \n            placeholder={placeholder}\n            className=\"form-control\"/>\n            <span className=\"form-text text-danger d-block\">{inputError}</span>\n          </div>\n          <div className=\"d-flex justify-content-start\">\n            <button type=\"submit\" className=\"btn btn-secondary mr-5\">Sign In</button>\n            <button className=\"btn btn-link text-light\" onClick={props.handleBack}>Cancel</button>\n          </div>\n        </form>\n        \n      </div>\n    );\n  } else {\n    return (\n      <h3 className=\"text-secondary\">\n          Loading...\n      </h3>\n    );\n  }\n};\n\nexport default UserForm;","import { State, Props } from '../App/App';\nimport Countdown from 'react-countdown';\n\nconst SignInCountDown = (props: Props) => {\n    const renderer = () => (\n        <div className=\"container p-3 text-center\">\n        <h3 className=\"text-light\">Sign-in {props.mode === State.SIGN_IN ? \"Successful\" : \"Failed\"}</h3>\n        <button className=\"btn btn-secondary\" onClick={props.handleBack}>Continue</button>\n        </div>\n      );\n\n    return (\n        <Countdown date={Date.now() + 10000} renderer={renderer} onComplete={props.handleBack}/>\n    );\n}\n \nexport default SignInCountDown;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/style.scss';\nimport App from './components/App/App';\n\ndocument.body.className=\"bg-dark\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App></App>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}